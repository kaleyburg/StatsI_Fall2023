# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
y_mean <- mean(y)
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
y_mean <- mean(y)
print(y_mean)
y_sd <- sd(y)
print(y)
print(y_sd)
length(y)
n <- length(y)
print(n)
se_y <- sd_y/(sqrt(n))
se_y <- y_sd/(sqrt(n))
print(se_y)
df_y <- n-1
print(df_y)
?qt
t95 <- qt((1 - .95)/2, df_y, lower.tail = FALSE)
lower_95 <- y_mean - (t95(se_y))
t95 <- qt((1 - .95)/2, df_y, lower.tail = FALSE)
lower_95 <- y_mean - (t95(se_y))
y_se <- y_sd/(sqrt(n))
rm(se_y)
lower_95 <- y_mean - ((t95)(se_y))
lower_95 <- y_mean - (t95 * (se_y))
lower_95 <- y_mean - (t95 * (y_se))
upper_95 <- y_mean + (t95 * (y_se)
upper_95 <- y_mean + (t95 * (y_se))
upper_95 <- y_mean + (t95 * (y_se))
confint95 <- c(lower_95, upper_95)
print(confint)
print(confint95)
#t score for .90
t90 <- qt((1 - .90)/2, df_y, lower.tail = FALSE)
lower_90 <- y_mean - (t90 * (y_se))
upper_90 <- y_mean + (t90 * (y_se))
confint95 <- c(lower_95, upper_95)
print(confint90)
lower_90 <- y_mean - (t90 * (y_se))
upper_90 <- y_mean + (t90 * (y_se))
confint90 <- c(lower_90, upper_90)
print(confint90)
rm(confint95, t95, upper_95, lower_95)
?rnorm
?function
?function
?qt
t_y <- ((y_mean - 100)/y_se)
y_t <- ((y_mean - 100)/y_se))
y_t <- ((y_mean - 100)/y_se)
rm(t_y)
?abs
y_t <- abs((y_mean - 100)/y_se)
y_t <- ((y_mean - 100)/y_se)
?qt
y_t <- abs((y_mean - 100)/y_se)
y_t
pt(y_t, df_y, lower.tail = TRUE)
pt(y_t, df_y, lower.tail = F)
absy_t <- abs((y_mean - 100)/y_se)
absy_t
pt(absy_t, df_y, lower.tail = F)
p_y <- pt(absy_t, df_y, lower.tail = F)
p_y
#mean of sample
y_mean <- mean(y)
print(y_mean)
2*pt(absy_t, df_y, lower.tail = F)
# Load data
df <- read.csv("datasets/fictional_data.csv")
# First step, look at data
View(df)
absy_t <- abs((y_mean - 100)/y_se)
str(df) # Present structure of R object
?str
### Income ###
hist(df$income) # Distribution
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
sd(df$income) # Variability, standard deviation
sd(df$income)/sqrt(length((df$income))) # Variability, standard **error**
# Step by step
df$income
length((df$income))
sqrt(length((df$income)))
sqrt(19)
sd(df$income)/sqrt(length((df$income)))
# Step by step
df$income
sd(df$income) # Variability, standard deviation
### Education ###
hist(df$edu) # Distribution
mean(df$edu) # Central tendency, mean
var(df$edu) # Variability, variance
sd(df$edu) # Variability, standard deviation
sd(df$edu)/sqrt(length((df$edu))) # Variability, standard **error**
# Which kind of inferences can we make with regards to the population,
# based on the sample data?
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length((df$income)))
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length((df$income))) # Standard error
### Histogram ###
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
# Lower bound
upper_95 = (mean(df$income))+(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Upper bound
lower_95 = (mean(df$income))-(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Print
lower_95
mean(df$income)
upper_95
### Histogram ###
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
### Scatter plot ###
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Improve visualization and save
png(file="tutorials/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
absy_t <- abs((y_mean - 100)/y_se)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
#mean of sample
y_mean <- mean(y)
print(y_mean)
#standard deviation of sample
y_sd <- sd(y)
print(y_sd)
#length of sample
n <- length(y)
print(n)
#standard error of sample
y_se <- y_sd/(sqrt(n))
print(se_y)
#standard error of sample
y_se <- y_sd/(sqrt(n))
print(se_y)
print(y_se)
#degrees of freedom for y
df_y <- n-1
print(df_y)
t90 <- qt((1 - .90)/2, df_y, lower.tail = FALSE)
lower_90 <- y_mean - (t90 * (y_se))
upper_90 <- y_mean + (t90 * (y_se))
confint90 <- c(lower_90, upper_90)
print(confint90)
?rnorm
y_t <- ((y_mean - 100)/y_se)
absy_t <- abs((y_mean - 100)/y_se)
absy_t
p_y <- pt(absy_t, df_y, lower.tail = F)
p_y
t95 <- qt((1 - .95), df_y, lower.tail = FALSE)
t95 <- qt((1 - .95), df_y, lower.tail = FALSE)
t95 <- qt((1 - .95)/2, df_y, lower.tail = FALSE)
t90 <- qt((1 - .90)/2, df_y, lower.tail = FALSE)
t90 <- qt((1 - .90)/2, df_y, lower.tail = FALSE)
t95 <- qt((1 - .95), df_y, lower.tail = TRUE)
t95 <- qt((1 - .95), df_y, lower.tail = F)
t95
p_yest <- pt(t95, df_y, lower.tail = F)
p_yest
p_ytest <- pt(t95, df_y, lower.tail = F)
p_ytest
rem(p_yest)
rm(p_yest)
t95
p_ytest <- pt(1.72, df_y, lower.tail = F)
p_ytest
p_ytest <- pt(0.59, df_y, lower.tail = F)
p_ytest
t95
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
#mean of sample
y_mean <- mean(y)
print(y_mean)
#standard deviation of sample
y_sd <- sd(y)
print(y_sd)
#length of sample
n <- length(y)
print(n)
#standard error of sample
y_se <- y_sd/(sqrt(n))
print(y_se)
#degrees of freedom for y
df_y <- n-1
print(df_y)
?qt
t90 <- qt((1 - .90)/2, df_y, lower.tail = FALSE)
lower_90 <- y_mean - (t90 * (y_se))
upper_90 <- y_mean + (t90 * (y_se))
confint90 <- c(lower_90, upper_90)
print(confint90)
y_t <- ((y_mean - 100)/y_se)
p_y <- pt(y_t, df_y, lower.tail = T)
p_y
t95 <- qt((1 - .95), df_y, lower.tail = F)
t95
p_ytest <- pt(0.59, df_y, lower.tail = F)
p_ytest
reprex::reprex()
?make.names
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
#mean of sample
y_mean <- mean(y)
print(y_mean)
#standard deviation of sample
y_sd <- sd(y)
print(y_sd)
#length of sample
n <- length(y)
print(n)
#standard error of sample
y_se <- y_sd/(sqrt(n))
print(y_se)
#degrees of freedom for y
df_y <- n-1
print(df_y)
?qt
t90 <- qt((1 - .90)/2, df_y, lower.tail = FALSE)
lower_90 <- y_mean - (t90 * (y_se))
upper_90 <- y_mean + (t90 * (y_se))
confint90 <- c(lower_90, upper_90)
print(confint90)
print(confint90)
(
p_y <- pt(y_t, df_y, lower.tail = T)
p_y
y_t
y_t <- ((y_mean - 100)/y_se)
y_t
p_y
t95
p_ytest <- pt(0.59, df_y, lower.tail = F)
p_ytest
p_y
p_y <- pt(y_t, df_y, lower.tail = T)
p_y
t95 <- qt((1 - .95), df_y, lower.tail = T)
t95
t95 <- qt((1 - .95), df_y, lower.tail = F)
t95
p_y <- pt(y_t, df_y, lower.tail = F)
p_y
t95 <- qt((1 - .95), df_y, lower.tail = F)
t95
?qt
# Get working directory
getwd()
# Set working directory
setwd("C:/Users/kburg/OneDrive/Documents/GitHub/StatsI_Fall2023")
getwd()
# Get working directory
getwd()
# Set working directory
setwd("C:/Users/kburg/OneDrive/Documents/GitHub/StatsI_Fall2023")
getwd()
